module map

/**
	more or less a port of Mineflayer's Chunk.cpp
*/

import time

local count = 0
local preCount = 0
local finished = false
local chunks = {}

import signal : emit
signal.add("MapDownloadFinished")

onPreChunk(\p{
	local x = p.x
	local z = p.z
	if(p.mode)
	{
		if(chunks[x] is null)
		{
			chunks[x] = {}
		}
	}
	else
	{	
		chunks[x][z] = null
		if(#chunks[x] == 0)
			chunks[x] = null
	}
})

onMapChunk(\p
{
	local x, z = p.x >> 4, p.z >> 4
	
	if(p.sizeX == 16 && p.sizeY == 128 && p.sizeZ == 16)
	{
		//we got a full chunk here		
		count++
		writefln $ "storing map chunk {}/{}", x, z
		chunks[x][z] = Chunk(x, z, data(p))
	}
	else
	{
		writefln $ "chunk size: {}/{}/{}", p.sizeX, p.sizeY, p.sizeZ
	}
})

class Chunk
{
	x
	z
	data
	
	size = 
	{
		x = 16
		y = 128
		z = 16
	}
	volume = Chunk.size.x * Chunk.size.y * Chunk.size.z
	offset = 
	{
		metadata = Chunk.volume * 2 / 2
		light = Chunk.volume * 3 / 2
		sky_light = Chunk.volume * 4 / 2
	}
	
	this(x : int, z : int, data : memblock)
	{
		:x = x
		:z = z
		:data = data
	}
	
	function indexOf(x : int, y : int, z : int)
	{
		writefln $ "{}/{}/{}", x, y, z
		assert(0 <= x)
		assert(x < :size.x)
        assert(0 <= y)
		assert(y < :size.y)
        assert(0 <= z)
		assert(z < :size.z)
		
		return y + (z * :size.y) + (x * :size.y * :size.z)
	}
	
	function getBlock(x : int, y : int, z : int)
	{
		local idx = :indexOf(x, y, z)
		local nibble = (idx & 1) * 4;
		
		return :data[idx] & 0xff
	}
}

@onMapChunk
local function mapChunk(p)
{
	//writefln $ "mapchunk {} {} * {} * {}", count, p.sizeX, p.sizeY, p.sizeZ
	
	//writefln $ "mapchunk: {}", p.size
	
	if(count == preCount)
	{
		finished = true
		emit("MapDownloadFinished")
		return true
	}
}


@onPreChunk
local function preChunk(packet)
{
	if(finished)
		return true
	preCount++
}

global function blockAt(x : int, y : int, z : int)
{
	return chunks[x >> 4][z >> 4].getBlock(x % 16, y, z % 16)
}